# Cursor Rules for Splunk App Development

[splunk_app_standards]
description = "Rules to ensure Splunk app compatibility across instances"
severity = "error"

# Rule 1: No Hardcoded Paths
[no_hardcoded_paths]
description = "Avoid hardcoded paths that may differ across Splunk instances"
severity = "error"
patterns = [
    "/opt/splunk",
    "C:\\Program Files\\Splunk",
    "\\\\splunk\\",
    "/usr/local/splunk"
]

# Rule 2: No Local Environment Dependencies
[no_local_dependencies]
description = "Avoid dependencies on local environment settings"
severity = "error"
patterns = [
    "os.environ\\['HOME'\\]",
    "os.environ\\['USERPROFILE'\\]",
    "os.environ\\['PWD'\\]",
    "os.environ\\['PATH'\\]"
]

# Rule 3: Proper Python Path Management
[proper_python_path]
description = "Use proper Python path management for Splunk apps"
severity = "error"
required_patterns = [
    "os.path.dirname\\(os.path.abspath\\(__file__\\)\\)",
    "sys.path.append\\("
]

# Rule 4: Splunk SDK Import Standards
[splunk_sdk_imports]
description = "Use proper Splunk SDK import statements"
severity = "error"
required_patterns = [
    "import splunk.Intersplunk",
    "# type: ignore  # After Splunk imports"
]

# Rule 5: No Direct File System Access
[no_direct_fs_access]
description = "Avoid direct file system access outside app directory"
severity = "error"
patterns = [
    "open\\('/'",
    "open\\('[A-Z]:\\\\'",
    "os.path.join\\('/', ",
    "os.path.join\\('[A-Z]:\\\\', "
]

# Rule 6: Proper Exception Handling
[proper_exception_handling]
description = "Use Splunk's error handling mechanisms"
severity = "error"
required_patterns = [
    "splunk.Intersplunk.generateErrorResults\\(",
    "try:",
    "except Exception as e:"
]

# Rule 7: No Local Configuration
[no_local_config]
description = "Avoid local configuration files"
severity = "error"
patterns = [
    "\\.env",
    "config\\.ini",
    "settings\\.json"
]

# Rule 8: Proper Command Registration
[proper_command_registration]
description = "Ensure commands are properly registered"
severity = "error"
required_files = [
    "default/commands.conf",
    "default/app.conf"
]
required_patterns_in_commands = [
    "filename = ",
    "type = python",
    "local = true"
]

# Rule 9: No External Network Access
[no_external_network]
description = "Avoid direct external network access"
severity = "error"
patterns = [
    "requests\\.",
    "urllib\\.",
    "http\\.",
    "socket\\."
]

# Rule 10: Proper Module Structure
[proper_module_structure]
description = "Maintain proper module structure"
severity = "error"
required_files = [
    "bin/__init__.py",
    "default/app.conf",
    "default/commands.conf"
]

# Rule 11: App Packaging and Installation Process
[app_packaging_process]
description = "Standard process for packaging and installing Splunk app updates"
severity = "info"
required_steps = [
    # Version Update
    {
        "step": "Update version numbers",
        "files": [
            "app.manifest: info.id.version",
            "default/app.conf: launcher.version and id.version"
        ]
    },
    # Package Creation
    {
        "step": "Create package",
        "powershell_commands": [
            "Remove-Item -Force nodeheim-VERSION.* -ErrorAction SilentlyContinue",
            "Remove-Item -Force -Recurse staging -ErrorAction SilentlyContinue",
            "New-Item -ItemType Directory -Path staging/nodeheim",
            "Copy-Item -Recurse nodeheim/* staging/nodeheim/",
            "Compress-Archive -Path staging/nodeheim -DestinationPath nodeheim-VERSION.zip -Force",
            "Rename-Item -Force nodeheim-VERSION.zip nodeheim-VERSION.spl"
        ]
    },
    # Installation
    {
        "step": "Install in Splunk",
        "docker_commands": [
            "docker cp nodeheim-VERSION.spl splunk:/tmp/",
            "docker exec -u root -it splunk /opt/splunk/bin/splunk install app /tmp/nodeheim-VERSION.spl -update 1 -auth admin:Password123",
            "docker exec -u root -it splunk /opt/splunk/bin/splunk restart"
        ]
    }
]

# Rule 12: Version Management
[version_management]
description = "Version numbering and update rules"
severity = "info"
version_format = "MAJOR.MINOR.PATCH"
version_rules = [
    "Major: Breaking changes (e.g., 1.0.0 to 2.0.0)",
    "Minor: New features, backward compatible (e.g., 1.0.0 to 1.1.0)",
    "Patch: Bug fixes, backward compatible (e.g., 1.0.0 to 1.0.1)"
]
required_version_files = [
    "app.manifest",
    "default/app.conf"
]